import java.util.ArrayList;
import java.util.Set;


public abstract class AbstractHangmanUI implements HangmanUIInterface {

	private final char LOWEST_LEGIT_CHAR = 'a';
	private final char HIGHEST_LEGIT_CHAR = 'z';
	private final int ALPHABET_LENGTH = 26;
	
	/**
	 * Returns true if the user-specified word length is less than or equal to the
	 * longest word in the hangman dictionary and greater than 0.
	 * @param userLength - the length specified by the user
	 * @param maxWordLength - the longest word length found in the dictionary 
	 * @return true if the userLength is >0 and <= maxWordLength 
	 */
	public boolean validateUserWordLength( int userLength, int maxWordLength )
	{
		return false;
	}
	
	/**
	 * Returns true if a user-specified char is within the range specified by LOWEST_LEGIT_CHAR
	 * and HIGHEST_LEGIT_CHAR.
	 * @param Character - the char to be validated
	 * @return true if the char is within the specified range of chars
	 */
	public boolean validateCharacter( char Character )
	{
		return false;
	}
	
	/**
	 * Returns boolean value specified by whether a user-specified int is <= ALPHABET_LENGTH.
	 * @param totalGuesses - total number of guesses specified by the user.
	 * @return true if totalGuesses <= ALPHABET_LENGTH
	 */
	public boolean validateGuessLimit( int totalGuesses )
	{
		return false;
	}
	
	/**
     * Displays welcome message.
     */
    public abstract void displayWelcome();
    
    /**
     * Request user input for current guess.
     * @return  char
     */
    public abstract char askGuess();
    
    /**
     * Request user input for the number of guesses allowed.
     * @return  int
     */
    public abstract int askGuessLimit();
    
    /**
     * Request length of word.
     * @return  int
     */
    public abstract int askWordLength();
    
    /**
     * Display current state of game consisting of guesses left, array of previously guess letters,
     * and current pattern of blanks and correct guesses.
     * 
     * @param int numberOfGuessesRemaining
     * @param Set previousGuesses a set that contains all previous guesses with no duplicate values
     * @param ArrayList<Character> currentPattern contains a pattern of letters and blanks
     */
    public abstract void displayCurrentState(int numberOfGuessesRemaining, 
    										Set<Character> previousGuesses, 
    										ArrayList<Character> currentPattern);
    
    /**
     * Report that current guess is correct.
     * @param char currentGuess
     */
    public abstract void displayCorrectGuess(char currentGuess);
    
    /**
     * Report that current guess is incorrect.
     * @param char currentGuess
     */
    public abstract void displayIncorrectGuess(char currentGuess);
    
    /**
     * Display correct answer.
     * @param String correctAnswer
     */
    public abstract void displayAnswer(String correctAnswer);
    
    /**
     Display win message.
     */
    public abstract void displayWinMessage();
    
    /**
     Display loss message.
     */
    public abstract void displayLossMessage();
    
    
    /**
     * Display previously guessed message
     * @param previouslyGuessed char that has already been guessed
     */
    public abstract void displayAlreadyGuess(char previouslyGuessed);
    
    /**
     Ask user if they wish to play another game.
     * @return  boolean true if user requests a new game; false otherwise
     */
    public abstract boolean askNewGame();
    
    public abstract void displayGoodbyeMessage();
    

}
