import static org.junit.Assert.*; 
  
import java.util.ArrayList; 
import java.util.Arrays; 
import java.util.Hashtable; 
import java.util.Iterator; 
import java.util.List; 
import java.util.Map; 
import java.util.Set; 
import java.util.TreeSet; 
  
import org.junit.Before; 
import org.junit.Test; 
  
public class DictionaryTest { 
      
    private Set<String> validWordSet; 
    private Set<String> longestWordSet; 
    private Map<String, Set<String>> testTable; 
    private Map<String, Set<String>> testTable2;
    private Set<String> testList; 
      
    @Before
    public void setUp(){ 
        validWordSet = new TreeSet<String>(); 
        validWordSet.add("three"); 
        validWordSet.add("trust"); 
        validWordSet.add("steal"); 
        validWordSet.add("fired"); 
        validWordSet.add("chair"); 
        validWordSet.add("locus"); 
          
        longestWordSet = new TreeSet<String>(); 
        longestWordSet.add("a"); 
        longestWordSet.add("aa"); 
        longestWordSet.add("aaa"); 
        longestWordSet.add("aaaa"); 
        longestWordSet.add("aaaaa"); 
        longestWordSet.add("aaaaaa"); 
        longestWordSet.add("aaaaaaa"); 
        longestWordSet.add("aaaaaaaa"); 
        longestWordSet.add("aaaaaaaaa"); 
        longestWordSet.add("aaaaaaaaaa"); 
        longestWordSet.add("aaaaaaaaaaa"); 
        longestWordSet.add("aaaaaaaaaaaa"); 
          
        testList = new TreeSet<String>(); 
        testList.add("three"); 
        testList.add("trust"); 
        testList.add("steal"); 
        testList.add("fired"); 
        testList.add("chair"); 
        testList.add("locus"); 
          
        testTable = new Hashtable<String, Set<String>>(); 
        testTable.put( "testKey", testList ); 
        
        testTable2 = new Hashtable<String, Set<String>>();
        testTable2.put("key1", validWordSet);
        testTable2.put("key2", longestWordSet);
        testTable2.put("key3", testList);
          
    } 
      
    @Test
    public void lengthLongestWordTest() 
    { 
        Dictionary testDictionary = new Dictionary();    
        int length = testDictionary.lengthLongestWord(longestWordSet); 
        assertEquals(12, length); 
    } 
      
    @Test
    public void getWordSetTest() 
    { 
        // Testing: Set<String> getWordSet( int wordLength ); 
          
        // Are all words in the set of the correct length (compared to the param)? 
          
        // Should cases of zero be handled by this method or beforehand? 
          
        // All words in the set are of the correct length 
          
        // When the int is too large it will return an empty set...a method should be called to 
        // handle the empty set. 
        int wordLength = 3; 
        Dictionary testDictionary = new Dictionary(); 
        assertNotNull(testDictionary); 
        Set<String> validWords = testDictionary.getWordSet(wordLength); 
        assertNotNull(validWords); 
        Iterator<String> iterator = validWords.iterator(); 
        for (int i = 0; i<validWords.size(); i++) 
        { 
            assertEquals(wordLength, iterator.next().length()); 
        } 
          
        try{                                                 
            testDictionary.getWordSet(-1); //test that negative value throws error 
            fail("No illegal argument exception thrown"); 
            } 
        catch (IllegalArgumentException e) 
           { 
               assertTrue(true); 
           } 
        catch (Exception e) 
           { 
               fail ("checkGuess() threw improper exception for out of range value."); 
           } 
          
        try{                                                 
            testDictionary.getWordSet(0); //test that value 0 throws error 
            fail("No illegal argument exception thrown"); 
            } 
        catch (IllegalArgumentException e) 
           { 
               assertTrue(true); 
           } 
        catch (Exception e) 
           { 
               fail ("checkGuess() threw improper exception for out of range value."); 
           } 
          
        try{ 
            testDictionary.getWordSet(46); //test that value greater than 45 throws error 
            fail("No illegal argument exception thrown"); 
            } 
        catch (IllegalArgumentException e) 
           { 
               assertTrue(true); 
           } 
        catch (Exception e) 
           { 
               fail ("checkGuess() threw improper exception for out of range value."); 
           } 
    } 
      
    @Test
    public void selectWordTest() 
    {        
        // Returns a String randomly selected from the Set   
        Dictionary testDictionary = new Dictionary(); 
        assertNotNull(testDictionary); 
        assertTrue(validWordSet.contains(testDictionary.selectWord(validWordSet))); 
    } 
      
    @Test
    public void generateRandomNumberTest() 
    { 
        Dictionary testDictionary = new Dictionary(); 
        assertNotNull(testDictionary); 
        int testValue = testDictionary.generateRandomNumber(validWordSet); 
        assertTrue(testValue >-1 && testValue < validWordSet.size()); 
    } 
      
    @Test
    public void testAddWord() 
    { 
        Dictionary test = new Dictionary(); 
        String testWord  = "test"; 
        String key = "testKey"; 
        Set<String> testArray = testTable.get(key); 
        testArray.add(testWord); 
        Map<String, Set<String>> dummyTable = new Hashtable<String, Set<String>>(); 
        dummyTable.put(key, testArray); 
        testTable = test.addWord(testWord, key, testTable); 
        assertEquals( dummyTable, testTable ); 
    } 
      
    @Test
    public void testGeneratePattern() 
    { 
        Dictionary test = new Dictionary(); 
        char chr = 'a'; // the guessed char 
        // The strings to be passed as the currentValidWord 
        String s = "bbbbb"; 
        String s1 = "abbbb"; 
        String s2 = "babbb"; 
        String s3 = "bbabb"; 
        String s4 = "bbbab"; 
        String s5 = "bbbba"; 
        String s6 = "aabbb"; 
        String s7 = "baabb"; 
        String s8 = "bbaab"; 
        String s9 = "bbbaa"; 
        String s10 = "abbba"; 
        String s11 = "babab"; 
        String s12 = "babba"; 
        // The expected returns from Dictionary.generatePattern() 
        String allBlank = "_____"; 
        String oneFirstPos = "a____"; 
        String oneSecPos = "_a___"; 
        String oneThirdPos = "__a__"; 
        String oneFourPos = "___a_"; 
        String oneLastPos = "____a"; 
        String twoAbreast = "aa___"; 
        String twoAbreast1 = "_aa__"; 
        String twoAbreast2 = "__aa_"; 
        String twoAbreast3 = "___aa"; 
        String justTwo = "a___a"; 
        String justTwo1 = "_a_a_"; 
        String justTwo2 = "_a__a"; 
        // The strings are assigned the String returned from Dictionary.generatePattern( char, String ) 
        String allBlankTest = test.generatePattern( chr, s ); 
        String oneFirstPosTest = test.generatePattern( chr, s1 ); 
        String oneSecPosTest = test.generatePattern( chr, s2 ); 
        String oneThirdPosTest = test.generatePattern( chr, s3 ); 
        String oneFourPosTest = test.generatePattern( chr, s4 ); 
        String oneLastPosTest = test.generatePattern( chr, s5 ); 
        String twoAbreastTest = test.generatePattern( chr, s6 ); 
        String twoAbreast1Test = test.generatePattern( chr, s7 ); 
        String twoAbreast2Test = test.generatePattern( chr, s8 ); 
        String twoAbreast3Test = test.generatePattern( chr, s9 ); 
        String justTwoTest = test.generatePattern( chr, s10 ); 
        String justTwo1Test = test.generatePattern( chr, s11 ); 
        String justTwo2Test = test.generatePattern( chr, s12 );  
        // assertEquals for every pair 
        assertEquals( allBlank, allBlankTest ); 
        assertEquals( oneFirstPos, oneFirstPosTest ); 
        assertEquals( oneSecPos, oneSecPosTest ); 
        assertEquals( oneThirdPos, oneThirdPosTest ); 
        assertEquals( oneFourPos, oneFourPosTest ); 
        assertEquals( oneLastPos, oneLastPosTest ); 
        assertEquals( twoAbreast, twoAbreastTest ); 
        assertEquals( twoAbreast1, twoAbreast1Test ); 
        assertEquals( twoAbreast2, twoAbreast2Test ); 
        assertEquals( twoAbreast3, twoAbreast3Test ); 
        assertEquals( justTwo, justTwoTest ); 
        assertEquals( justTwo1, justTwo1Test ); 
        assertEquals( justTwo2, justTwo2Test ); 
    } 
      
    @Test
    public void testInitializeHashtable() 
    { 
        Dictionary test = new Dictionary(); 
        String firstPattern  = "_____"; 
        String key = "_____"; 
        Set<String> testSet = new TreeSet<String>(); 
        Map<String, Set<String>> dummyTable = new Hashtable<String, Set<String>>(); 
        dummyTable.put( key, testSet ); 
        testTable = test.initializeHashtable( firstPattern, testSet); 
        assertEquals( dummyTable, testTable ); 
    } 
      
    @Test
    public void testNewKeyValuePair() 
    { 
        Dictionary test = new Dictionary(); 
        String key  = "_a___"; 
        String patternWord = "taint"; 
        Set<String> testSet = new TreeSet<String>(); 
        Map<String, Set<String>> dummyTable = new Hashtable<String, Set<String>>(); 
        dummyTable.put( key, testSet ); 
        dummyTable.get( key ).add( patternWord ); 
        testTable = test.newKeyValuePair( key, patternWord ); 
        assertEquals( dummyTable, testTable ); 
    } 
    
    
    @Test 
    public void testFindLongestList()
    {
    	Dictionary test = new Dictionary();
    	Map<String, Set<String>> thisTestList = testTable2;
    	Set<String> actualReturnedSet = test.findLongestList(thisTestList);
    	assertNotNull(actualReturnedSet);
    	assertEquals(actualReturnedSet, longestWordSet);	
    	thisTestList.remove("key2");
    	actualReturnedSet = test.findLongestList(thisTestList);
    	assertEquals(actualReturnedSet, testList);
    	assertNotSame(actualReturnedSet, validWordSet);
    }
    
    @Test 
    public void testAddKeyValuePair()
    {
    	Map<String, Set<String>> thisTestList = testTable2;
    	Map<String, Set<String>> newKeyValuePair = new Hashtable<String, Set<String>>();
    	Set<String> newValueSet = new TreeSet<String>();
    	newValueSet.add("value");
    	newKeyValuePair.put("test", newValueSet);
    }
} 